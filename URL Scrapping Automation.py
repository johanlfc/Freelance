{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0adc829f",
   "metadata": {},
   "outputs": [],
   "source": [
    "from selenium import webdriver\n",
    "from selenium.webdriver.chrome.service import Service\n",
    "from selenium.webdriver.chrome.options import Options\n",
    "from selenium.webdriver.common.by import By\n",
    "import pandas as pd\n",
    "import csv\n",
    "import time\n",
    "\n",
    "# Path to your chromedriver\n",
    "chromedriver_path = '/Users/johan/Desktop/Insta OF/chromedriver-mac-x64/chromedriver'\n",
    "\n",
    "# Setup Chrome options\n",
    "chrome_options = Options()\n",
    "chrome_options.add_argument('--no-sandbox')\n",
    "chrome_options.add_argument('--disable-dev-shm-usage')\n",
    "chrome_options.add_argument('--remote-debugging-port=9222')\n",
    "chrome_options.add_argument('--headless')  # Uncomment if you want to run headless\n",
    "\n",
    "# Initialize the WebDriver using Service\n",
    "service = Service(executable_path=chromedriver_path)\n",
    "driver = webdriver.Chrome(service=service, options=chrome_options)\n",
    "\n",
    "# Function to scrape LinkedIn URLs from the page\n",
    "def scrape_linkedin_urls(page_url):\n",
    "    driver.get(page_url)\n",
    "    time.sleep(5)  # Wait for the page to fully load\n",
    "    linkedin_urls = set()\n",
    "    try:\n",
    "        links = driver.find_elements(By.TAG_NAME, 'a')\n",
    "        for link in links:\n",
    "            try:\n",
    "                href = link.get_attribute('href')\n",
    "                if href and 'linkedin' in href and '/in/' in href:\n",
    "                    linkedin_urls.add(href)\n",
    "            except Exception as e:\n",
    "                print(f\"Error accessing link in {page_url}: {e}\")\n",
    "    except Exception as e:\n",
    "        print(f\"Error finding links in {page_url}: {e}\")\n",
    "    return linkedin_urls\n",
    "\n",
    "# Load the list of URLs from the CSV file\n",
    "input_file = 'input_urls.csv'\n",
    "df = pd.read_csv(input_file, header=None)  # Assuming no headers\n",
    "urls = df.iloc[:, 0].tolist()  # Get the first column\n",
    "\n",
    "# Dictionary to store results\n",
    "results = {'Page URL': [], 'LinkedIn URL': []}\n",
    "\n",
    "# Scrape each URL\n",
    "for url in urls:\n",
    "    print(f\"Scraping URL: {url}\")\n",
    "    linkedin_urls = scrape_linkedin_urls(url)\n",
    "    \n",
    "    if linkedin_urls:\n",
    "        print(f\"Found LinkedIn URLs on {url}: {linkedin_urls}\")\n",
    "    else:\n",
    "        print(f\"No LinkedIn URLs found on {url}\")\n",
    "    \n",
    "    for linkedin_url in linkedin_urls:\n",
    "        results['Page URL'].append(url)\n",
    "        results['LinkedIn URL'].append(linkedin_url)\n",
    "\n",
    "# Convert results to a DataFrame\n",
    "result_df = pd.DataFrame(results)\n",
    "\n",
    "# Save results to a new CSV file\n",
    "output_file = 'linkedin_urls.csv'\n",
    "result_df.to_csv(output_file, index=False)\n",
    "\n",
    "print(f\"Scraping completed and data saved to '{output_file}'\")\n",
    "\n",
    "# Close the WebDriver\n",
    "driver.quit()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.13"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
